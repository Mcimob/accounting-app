name: Update Version on Test

on:
  push:
    branches:
      - test

jobs:
  update-version-test:
    runs-on: ubuntu-latest
    steps:

      - name: Set version
        run: echo "VERSION=$(grep -oP '(?<=<version>)[0-9]+\.[0-9]+\.[0-9]+.*(?=<\/version>)' pom.xml | head -n 1)" >> $GITHUB_ENV

      - name: Set env RUN_MERGE
        run: |
          if [[ VERSION =~ *SNAPSHOT ]]; then
              echo "RUN_MERGE=false" >> "$GITHUB_ENV"
          else
              echo "RUN_MERGE=true" >> "$GITHUB_ENV"
          fi

      - name: Checkout repository
        if: env.RUN_MERGE == 'false'
        uses: actions/checkout@v4

      - name: Update version in pom.xml
        if: env.RUN_MERGE == 'false'
        run: |
          sed -i "s/<version>$VERSION-SNAPSHOT<\/version>/<version>$VERSION<\/version>/" pom.xml

          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git commit -am "Update version for test release: $NEW_VERSION"
          
          git push

      - name: Checkout repository
        if: env.RUN_MERGE == 'true'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}

      - name: Merge test back into develop
        if: env.RUN_MERGE == 'true'
        run: |
          # Fetch all remote branches to ensure develop and test are both up-to-date
          git fetch --all
          
          # Ensure we are on the develop branch
          git checkout develop
          
          # Pull the latest changes from the remote develop branch to ensure we have all the latest updates
          git pull origin develop
          
          # Merge the updated test branch into develop, allowing unrelated histories if necessary
          git merge --no-ff --strategy-option=theirs --allow-unrelated-histories test -m "Auto-merge test into develop after removing -SNAPSHOT [ci skip]"
          
          # Push the changes to the remote develop branch
          git push origin develop
